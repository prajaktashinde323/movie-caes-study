import java.io.*;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

public class duration
{
	 public static class mymap extends Mapper<LongWritable,Text, Text,LongWritable>
	 {
		public void map (LongWritable inkey,Text val,Context context) throws InterruptedException,IOException
		{
			String[] str= val.toString().split(",");
			Text outkey=new Text("1");
			
			long dur = Long.parseLong(str[4]);
			if( dur >5400)
			{
				//long moviename=str[1];
				context.write(outkey,new LongWritable(dur));
			}
			
			
		}
		
	 }
	 public  static class myreduce extends Reducer<Text,LongWritable,Text,LongWritable> 
	 {
		 public void reduce (Text inkey,Iterable<LongWritable>val,Context context)throws InterruptedException,IOException
		 {
			 int count=0;
			 for(LongWritable v:val)
			 {
				 count++;
			 }
			 context.write(inkey,new LongWritable(count));
		 }
	 }
	 
	 public static void main(String[] args) throws Exception
	 {
		    Configuration conf = new Configuration();
		    
		    Job job = new Job(conf, "movie");
		    job.setJarByClass(duration.class);
		    job.setMapperClass(mymap.class);
		    job.setReducerClass(myreduce.class);
		    job.setNumReduceTasks(1);
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(LongWritable.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
		  }
}

